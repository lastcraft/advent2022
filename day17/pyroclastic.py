class Block:
    def __init__(self, width, height, *masks):
        self.width, self.height, self.masks = width, height, masks

    def __repr__(self):
        return "\n".join([f"{mask:07b}" for mask in reversed(self.masks)])

    def instantiate(self):
        return Block(self.width, self.height, *self.masks[:])

    def shl(self):
        if sum([mask & 64 for mask in self.masks]) == 0:
            self.masks = [mask << 1 for mask in self.masks]
            return True
        return False

    def shr(self):
        if sum([mask & 1 for mask in self.masks]) == 0:
            self.masks = [mask >> 1 for mask in self.masks]
            return True
        return False

class Column:
    def __init__(self):
        self.stack = []

    def __repr__(self):
        return "\n".join([f"{mask:07b}" for mask in reversed(self.stack)])

    def height(self):
        height = len(self.stack)
        while height > 0 and self.stack[height - 1] == 0:
            height -= 1
        return height

    def place(self, height, block):
        self.stack += [0] * (height + block.height - len(self.stack))
        for i, mask in enumerate(block.masks):
            self.stack[height + i] |= mask

    def is_collision(self, height, block):
        if height < 0:
            return True
        self.stack += [0] * (height + block.height - len(self.stack))
        for i, mask in enumerate(block.masks):
            if self.stack[height + i] & mask != 0:
                return True
        return False

    def capture_state(self, tick, gust):
        depths = [None] * 7
        height = self.height()
        while any([depth == None for depth in depths]):
            height -= 1
            for bit in range(0, 7):
                if depths[bit] == None:
                    if height < 0:
                        depths[bit] = self.height()
                    else:
                        depths[bit] = self.height() - height if self.stack[height] & (2 ** bit) > 0 else None
        return State(tick, gust, self.height(), depths)

class State:
    def __init__(self, tick, gust, height, depths):
        self.height = height
        self.depths = depths
        self.tick = tick
        self.gust = gust

    def __repr__(self):
        return f"State({self.tick}, {self.gust}, {self.height}, {list(reversed(self.depths))})"

    def __eq__(self, other):
        return self.gust == other.gust and self.depths == other.depths

BLOCKS = [
    Block(4, 1, 30),
    Block(3, 3, 8, 28, 8),
    Block(3, 3, 28, 4, 4),
    Block(1, 4, 16, 16, 16, 16),
    Block(2, 2, 24, 24)]

def part1(data):
    gusts = data.strip()
    column = Column()
    tick = 0
    for i in range(0, 2022):
        height = column.height() + 3
        block = BLOCKS[i % 5].instantiate()
        while True:
            if gusts[tick] == ">":
                if block.shr() and column.is_collision(height, block):
                    block.shl()
            else:
                if block.shl() and column.is_collision(height, block):
                    block.shr()
            tick = (tick + 1) % len(gusts)
            if column.is_collision(height - 1, block):
                column.place(height, block)
                break
            height -= 1
    print(column.height())

def part2(data):
    gusts = data.strip()
    column = Column()
    gust = 0
    states = []
    rockfall = 1000000000000
    skipped_height = [None]
    i = 0
    while True:
        if i >= rockfall:
            break
        height = column.height() + 3
        block = BLOCKS[i % 5].instantiate()
        if skipped_height[0] is None and i % 5 == 0:
            state = column.capture_state(i, gust)
            for historical in states:
                if historical == state:
                    jump = state.tick - historical.tick
                    skipped = int((rockfall - i)/jump)
                    skipped_height[0] = skipped * (state.height - historical.height)
                    i += skipped * jump
                    break
            states.append(state)
        while True:
            if gusts[gust] == ">":
                if block.shr() and column.is_collision(height, block):
                    block.shl()
            else:
                if block.shl() and column.is_collision(height, block):
                    block.shr()
            gust = (gust + 1) % len(gusts)
            if column.is_collision(height - 1, block):
                column.place(height, block)
                break
            height -= 1
        i += 1
    print(column.height() + skipped_height[0])

part2("""

""")
